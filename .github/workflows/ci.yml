name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_todoweb
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev pkg-config

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -u"test_user" -p"test_password" --silent; do
          sleep 1
        done

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
      env:
        DATABASE_URL: mysql+pymysql://test_user:test_password@127.0.0.1:3306/test_todoweb
        SECRET_KEY: test-secret-key-for-ci
        ALLOWED_ORIGINS: http://localhost:3000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint -- --max-warnings 50

    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --run

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build backend image
      run: |
        echo "Building backend image with tag: todoweb-backend:${{ github.sha }}"
        docker build -t todoweb-backend:${{ github.sha }} ./backend
        echo "Creating latest tag for backend"
        docker tag todoweb-backend:${{ github.sha }} todoweb-backend:latest
        echo "Backend image built successfully"

    - name: Build frontend image
      run: |
        echo "Building frontend image with tag: todoweb-frontend:${{ github.sha }}"
        docker build -t todoweb-frontend:${{ github.sha }} ./frontend
        echo "Creating latest tag for frontend"
        docker tag todoweb-frontend:${{ github.sha }} todoweb-frontend:latest
        echo "Frontend image built successfully"

    - name: Verify image builds
      run: |
        echo "Checking if images were built successfully..."
        if docker images | grep -q "todoweb-backend"; then
          echo "✅ Backend image built successfully"
        else
          echo "❌ Backend image not found"
        fi
        if docker images | grep -q "todoweb-frontend"; then
          echo "✅ Frontend image built successfully"
        else
          echo "❌ Frontend image not found"
        fi

    - name: List built images
      run: |
        echo "All Docker images:"
        docker images
        echo ""
        echo "Looking for todoweb images:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep todoweb || echo "No todoweb images found"

    - name: Test Docker images locally
      run: |
        echo "Testing backend image..."
        docker run --rm todoweb-backend:${{ github.sha }} python -c "import main; print('Backend image works!')" || \
        docker run --rm todoweb-backend:latest python -c "import main; print('Backend image works!')"
        echo "Testing frontend image..."
        docker run --rm todoweb-frontend:${{ github.sha }} ls -la /usr/share/nginx/html/ || \
        docker run --rm todoweb-frontend:latest ls -la /usr/share/nginx/html/
        echo "Docker images built successfully!"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        docker compose -f docker/docker-compose.yml up -d
        sleep 30

    - name: Run integration tests
      run: |
        cd scripts
        python test_backend.py

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker/docker-compose.yml down -v
